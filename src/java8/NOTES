

==> The features of Java stream are mentioned below:
    -> stream() method is a default method in Collection interface which returns an Object of Stream interface as follows
                                default Stream<E> stream();
    -> A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
    -> Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
    -> Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate
      operations can be pipelined. Terminal operations mark the end of the stream and return the result.
                                 list.stream().map(function).distinct().sorted().forEach(System.out::println);
    -> Streams don’t change the original data structure, they only provide the result as per the pipelined methods.
       That is why in JAVA 8, We can call stream() method on the list even if it is returned by
       List.of() or Array.asList() methods which actually gives an unmodifiable list as follows
                  List<Integer> myList = List.of(10, 12, 32, 11, 10, 21, 12);
                  myList.stream().distinct().sorted().forEach(System.out::println);

=> Intermediate operations are performed on Stream and they return stream back.
 => Terminal operations are performed on Stream but they return something except a Stream.
 => filter() function accepts a class that implements "Predicate" interface.
    Predicate<T> is a functional interface with one unimplemented method test(T t)
    When we write list.stream().filter(x -> x%2==0), we are providing implementation to that unimplemented method called test().
    It accepts one input T and gives a boolean output.
 => map() function accepts a class that implements "Function" interface.
    Function<T, T> is a functional interface with one unimplemented method called apply()
    It accepts single input T and returns single output T.
    When we write list.stream().map(x -> x*x), we are providing implementation to that unimplemented method called apply().
 => forEach() function accepts a class that implements Consumer interface.
    consumer is a functional interface with one unimplemented method accept()
    This method accepts single input and returns void.
    When we write list.stream().forEach(System.out::println), we are providing implementation to that unimplemented
    method called apply().

 => All these functional interfaces like Predicate<T>, Function<T, T>, Consumer<T>, BinaryOperator<T>, Supplier<T>, etc
    are all present in Java.util.Function package.
    Whenever we create an instance of any one of them we first provide implementation for that one unimplemented method
    for ex in case of Predicate<Integer>, we write (in older way)
    Predicate<Integer> predicate = new Predicate<Integer>(){
                        @Override
                        public boolean test(Integer x) {
                                  return x % 2 == 0;
                              }
                            };
    }

    New Way using lambda expression:
                Predicate<Integer> predicate = x -> x % 2 == 0;

    Now we can use this predicate as follows
                list.stream().filter(predicate).forEach(System.out::println);

     Similarly, there are several other functional interfaces. we can provide implementations to their unimplemented
     methods. And then pass them to intermediate stream methods. see FunctionalInterfaces.png


=> Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. 
=> A stream pipeline consists of a source (such as a Collection, an array, a generator function, or an I/O channel),
   followed by zero or more intermediate operations such as Stream.filter or Stream.map; 
   and a terminal operation such as Stream.forEach or Stream.reduce.
   
=> Intermediate operations return a new stream. They are always "lazy"; 
   executing an intermediate operation such as filter() does not actually perform any filtering, 
   but instead creates a new stream that, when traversed, contains the elements of the initial stream that 
   match the given predicate.
   
=> In almost all cases, terminal operations are "eager", completing their traversal of the data source and processing 
   of the pipeline before returning.
   After the terminal operation is performed, the stream pipeline is considered consumed, and can no longer be used; 
   if you need to traverse the same data source again, you must return to the data source to get a new stream.