JAVA is not purely OOP language because in OOPs support the concept of Objects and classes but Java supports primitive
datatypes as well. Even if we use wrapper classes, internally it will perform unboxing to use primitive datatypes

Interface:
Through interface we achieve abstraction( one of 4 basic OOPS Concepts) i.e hiding internal implementation details
we define the common behaviour inside an interface and provide specific
details of that behaviour inside implementing classes. for example
interface Shape{
    public float area(){}
    public float parameter(){}
}

class Circle implements Shape{
private float radius;
    public float area(){
       return pi*radius*radius;
    }
    public float parameter(){
        return 2*PI*radius;
    }
}

class Square implements Shape{
private float side;
    public float area(){
           return side*side;
        }
        public float parameter(){
            return 4*side;
        }
}

an interface can have following
1. constant variables: public static final by default and must be initialized***
2. Abstract methods : implicitly public
3. Default methods: implicitly public
4. private methods: provides encapsulation and code readability. can not be accessed outside an interface
5. static methods: can be accessed outside the interface using interface name:  OldInterface.staticMethod();
6. private static methods

***it is not a good practice to have constants in an interface because it does not solve any purpose of abstraction.
we can rather put the constants in an Enum or a separate class and make a static import of that class to use its constants directly.

@FunctionalInterface:  when an interface has exactly one abstract method. It can have any number of default implemented methods

a marker interface is one that has no methods. example Serializable and Cloneable

When we implement  an interface that contains a default method, we can perform following,

1. Not override the default method and will inherit the default method.
2. Override the default method similar to other methods we override in subclass..
3. Redeclare default method as "public" and "abstract", which force subclass to override it.
a default method can NOT override Object class methods

** "default" keyword tells us that this is an implemented method inside an interface and NOT inside a class
